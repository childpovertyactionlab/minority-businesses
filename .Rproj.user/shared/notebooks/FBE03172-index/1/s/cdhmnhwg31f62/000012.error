{"frames":[{"func":"leaflet(data = df) %>% addProviderTiles(\"CartoDB.Positron\") %>% \n    addPolygons(fillColor = ~colorQuantile(\"viridis\", heat_effect_F, \n        n = 5)(heat_effect_F), fillOpacity = 0.7, weight = 1, \n        color = \"white\", dashArray = \"3\") %>% addLegend(\"bottomright\",  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"addLegend(., \"bottomright\", pal = colorQuantile(\"viridis\", df$heat_effect_F, \n    n = 5), values = ~heat_effect_F, title = \"Heat Island Effect in Â°F\", \n    opacity = 1)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"evalFormula(values, data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"evalAll(list)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"resolveFormula(x, data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(f[[2]], metaData(data), environment(f))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"metaData(data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"getMapData(map)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"addPolygons(., fillColor = ~colorQuantile(\"viridis\", heat_effect_F, \n    n = 5)(heat_effect_F), fillOpacity = 0.7, weight = 1, color = \"white\", \n    dashArray = \"3\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"invokeMethod(map, data, \"addPolygons\", pgons, layerId, group, \n    options, popup, popupOptions, safeLabel(label, data), labelOptions, \n    highlightOptions) %>% expandLimitsBbox(pgons)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"expandLimitsBbox(., pgons)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"expandLimits(map, bbox[2, ], bbox[1, ])","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"invokeMethod(map, data, \"addPolygons\", pgons, layerId, group, \n    options, popup, popupOptions, safeLabel(label, data), labelOptions, \n    highlightOptions)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"evalFormula(list(...), data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"evalAll(list)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(x, evalAll)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(x, evalAll)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"resolveFormula(x, data)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(f[[2]], metaData(data), environment(f))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"eval(f[[2]], metaData(data), environment(f))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"colorQuantile(\"viridis\", heat_effect_F, n = 5)(heat_effect_F)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"cut(x, binsToUse, labels = FALSE, include.lowest = TRUE, right = right)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"cut.default(x, binsToUse, labels = FALSE, include.lowest = TRUE, \n    right = right)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(\"'breaks' are not unique\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error in cut.default(x, binsToUse, labels = FALSE, include.lowest = TRUE,  : \n  'breaks' are not unique\n"}