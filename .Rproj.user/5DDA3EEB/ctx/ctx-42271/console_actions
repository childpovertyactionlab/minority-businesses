{
    "type": [
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2
    ],
    "data": [
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = colorFactor(cpaltemplates::palette_cpal_main, levels(vendors$HUB), na.color=NULL),",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "> ",
        "m",
        "> ",
        "m <- leaflet(data = vendors) %>%",
        "+ ",
        "  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%",
        "+ ",
        "  addPolygons(",
        "+ ",
        "    data = dallas_co,",
        "+ ",
        "    fillColor = \"#333333\",",
        "+ ",
        "    fillOpacity = 0.05, weight = 2, color = \"#333333\",",
        "+ ",
        "    smoothFactor = 1,",
        "+ ",
        "    options = pathOptions(clickable = F, interactive = F)",
        "+ ",
        "  )",
        "> ",
        "for(i in seq_along(levels(vendors$HUB))) {",
        "+ ",
        "  hub <- levels(vendors$HUB)[i]",
        "+ ",
        "  m <- m %>%",
        "+ ",
        "    addCircleMarkers(",
        "+ ",
        "      data = vendors %>% filter(HUB == hub),",
        "+ ",
        "      group = hub,",
        "+ ",
        "      radius = 5,",
        "+ ",
        "      stroke = FALSE,",
        "+ ",
        "      color = cpaltemplates::palette_cpal_main[i],",
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = colorFactor(cpaltemplates::palette_cpal_main, unique(vendors$HUB), na.color=NULL),",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "> ",
        "m",
        "> ",
        "cpaltemplates::palette_cpal_main",
        "[1] \"#008097\" \"#ED018C\" \"#2F2F2F\" \"#ED683F\" \"#EACA2D\" \"#042D33\" \"#881354\"\n",
        "> ",
        "levels(vendors$HUB)",
        "[1] \"Black\"            \"Asian\"            \"Hispanic\"         \"Native American\"  \"Women Owned\"      \"Disabled Veteran\"\n",
        "> ",
        "levels(vendors$HUB)[1]",
        "[1] \"Black\"\n",
        "> ",
        "levels(vendors$HUB)[2]",
        "[1] \"Asian\"\n",
        "> ",
        "seq_along(levels(vendors$HUB))",
        "[1] 1 2 3 4 5 6\n",
        "> ",
        "",
        "> ",
        "m <- leaflet(data = vendors) %>%",
        "+ ",
        "  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%",
        "+ ",
        "  addPolygons(",
        "+ ",
        "    data = dallas_co,",
        "+ ",
        "    fillColor = \"#333333\",",
        "+ ",
        "    fillOpacity = 0.05, weight = 2, color = \"#333333\",",
        "+ ",
        "    smoothFactor = 1,",
        "+ ",
        "    options = pathOptions(clickable = F, interactive = F)",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "for(i in seq_along(levels(vendors$HUB))) {",
        "+ ",
        "  hub <- levels(vendors$HUB)[i]",
        "+ ",
        "  m <- m %>%",
        "+ ",
        "    addCircleMarkers(",
        "+ ",
        "      data = vendors %>% filter(HUB == hub),",
        "+ ",
        "      group = hub,",
        "+ ",
        "      radius = 5,",
        "+ ",
        "      stroke = FALSE,",
        "+ ",
        "      color = cpaltemplates::palette_cpal_main[i],",
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = ~colorFactor(cpaltemplates::palette_cpal_main, HUB, na.color=NULL),",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "Error in if (type == \"numeric\") { : argument is of length zero\n",
        "> ",
        "",
        "> ",
        "m <- leaflet(data = vendors) %>%",
        "+ ",
        "  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%",
        "+ ",
        "  addPolygons(",
        "+ ",
        "    data = dallas_co,",
        "+ ",
        "    fillColor = \"#333333\",",
        "+ ",
        "    fillOpacity = 0.05, weight = 2, color = \"#333333\",",
        "+ ",
        "    smoothFactor = 1,",
        "+ ",
        "    options = pathOptions(clickable = F, interactive = F)",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "for(i in seq_along(levels(vendors$HUB))) {",
        "+ ",
        "  hub <- levels(vendors$HUB)[i]",
        "+ ",
        "  m <- m %>%",
        "+ ",
        "    addCircleMarkers(",
        "+ ",
        "      data = vendors %>% filter(HUB == hub),",
        "+ ",
        "      group = hub,",
        "+ ",
        "      radius = 5,",
        "+ ",
        "      stroke = FALSE,",
        "+ ",
        "      color = cpaltemplates::palette_cpal_main[i],",
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = cpaltemplates::palette_cpal_main,",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "Error in if (type == \"numeric\") { : argument is of length zero\n",
        "> ",
        "",
        "> ",
        "m <- leaflet(data = vendors) %>%",
        "+ ",
        "  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%",
        "+ ",
        "  addPolygons(",
        "+ ",
        "    data = dallas_co,",
        "+ ",
        "    fillColor = \"#333333\",",
        "+ ",
        "    fillOpacity = 0.05, weight = 2, color = \"#333333\",",
        "+ ",
        "    smoothFactor = 1,",
        "+ ",
        "    options = pathOptions(clickable = F, interactive = F)",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "for(i in seq_along(levels(vendors$HUB))) {",
        "+ ",
        "  hub <- levels(vendors$HUB)[i]",
        "+ ",
        "  m <- m %>%",
        "+ ",
        "    addCircleMarkers(",
        "+ ",
        "      data = vendors %>% filter(HUB == hub),",
        "+ ",
        "      group = hub,",
        "+ ",
        "      radius = 5,",
        "+ ",
        "      stroke = FALSE,",
        "+ ",
        "      color = cpaltemplates::palette_cpal_main[i],",
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = pal(cpaltemplates::palette_cpal_main),",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "Error in pal(cpaltemplates::palette_cpal_main) : \n  could not find function \"pal\"\n",
        "> ",
        "",
        "> ",
        "m <- leaflet(data = vendors) %>%",
        "+ ",
        "  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%",
        "+ ",
        "  addPolygons(",
        "+ ",
        "    data = dallas_co,",
        "+ ",
        "    fillColor = \"#333333\",",
        "+ ",
        "    fillOpacity = 0.05, weight = 2, color = \"#333333\",",
        "+ ",
        "    smoothFactor = 1,",
        "+ ",
        "    options = pathOptions(clickable = F, interactive = F)",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "for(i in seq_along(levels(vendors$HUB))) {",
        "+ ",
        "  hub <- levels(vendors$HUB)[i]",
        "+ ",
        "  m <- m %>%",
        "+ ",
        "    addCircleMarkers(",
        "+ ",
        "      data = vendors %>% filter(HUB == hub),",
        "+ ",
        "      group = hub,",
        "+ ",
        "      radius = 5,",
        "+ ",
        "      stroke = FALSE,",
        "+ ",
        "      color = cpaltemplates::palette_cpal_main[i],",
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = ~colorFactor(cpaltemplates::palette_cpal_main, levels(vendors$HUB), na.color=NULL)(HUB),",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "Error in if (type == \"numeric\") { : argument is of length zero\n",
        "> ",
        "",
        "> ",
        "m <- leaflet(data = vendors) %>%",
        "+ ",
        "  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%",
        "+ ",
        "  addPolygons(",
        "+ ",
        "    data = dallas_co,",
        "+ ",
        "    fillColor = \"#333333\",",
        "+ ",
        "    fillOpacity = 0.05, weight = 2, color = \"#333333\",",
        "+ ",
        "    smoothFactor = 1,",
        "+ ",
        "    options = pathOptions(clickable = F, interactive = F)",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "for(i in seq_along(levels(vendors$HUB))) {",
        "+ ",
        "  hub <- levels(vendors$HUB)[i]",
        "+ ",
        "  m <- m %>%",
        "+ ",
        "    addCircleMarkers(",
        "+ ",
        "      data = vendors %>% filter(HUB == hub),",
        "+ ",
        "      group = hub,",
        "+ ",
        "      radius = 5,",
        "+ ",
        "      stroke = FALSE,",
        "+ ",
        "      color = cpaltemplates::palette_cpal_main[i],",
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = colorFactor(cpaltemplates::palette_cpal_main, levels(vendors$HUB), na.color=NULL),",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "> ",
        "",
        "> ",
        "m",
        "> ",
        "",
        "> ",
        "m <- leaflet(data = vendors) %>%",
        "+ ",
        "  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%",
        "+ ",
        "  addPolygons(",
        "+ ",
        "    data = dallas_co,",
        "+ ",
        "    fillColor = \"#333333\",",
        "+ ",
        "    fillOpacity = 0.05, weight = 2, color = \"#333333\",",
        "+ ",
        "    smoothFactor = 1,",
        "+ ",
        "    options = pathOptions(clickable = F, interactive = F)",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "for(i in seq_along(levels(vendors$HUB))) {",
        "+ ",
        "  hub <- levels(vendors$HUB)[i]",
        "+ ",
        "  m <- m %>%",
        "+ ",
        "    addCircleMarkers(",
        "+ ",
        "      data = vendors %>% filter(HUB == hub),",
        "+ ",
        "      group = hub,",
        "+ ",
        "      radius = 5,",
        "+ ",
        "      stroke = FALSE,",
        "+ ",
        "      color = cpaltemplates::palette_cpal_main[i],",
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = colorFactor(cpaltemplates::palette_cpal_main, levels(vendors$HUB), na.color=NULL, ordered = TRUE),",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "> ",
        "",
        "> ",
        "m",
        "> ",
        "cpaltemplates::palette_cpal_quintile",
        "[1] \"#F4FBFC\" \"#E1F5F8\" \"#9ADAE5\" \"#008097\" \"#042D33\"\n",
        "> ",
        "cpaltemplates::palette_cpal_main",
        "[1] \"#008097\" \"#ED018C\" \"#2F2F2F\" \"#ED683F\" \"#EACA2D\" \"#042D33\" \"#881354\"\n",
        "> ",
        "map_palette <- c(\"#008097\", \"#ED683F\", \"#EACA2D\", \"#5C2B1C\", \"#ED018C\", \"#185411\")",
        "> ",
        "",
        "> ",
        "m <- leaflet(data = vendors) %>%",
        "+ ",
        "  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%",
        "+ ",
        "  addPolygons(",
        "+ ",
        "    data = dallas_co,",
        "+ ",
        "    fillColor = \"#333333\",",
        "+ ",
        "    fillOpacity = 0.05, weight = 2, color = \"#333333\",",
        "+ ",
        "    smoothFactor = 1,",
        "+ ",
        "    options = pathOptions(clickable = F, interactive = F)",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "for(i in seq_along(levels(vendors$HUB))) {",
        "+ ",
        "  hub <- levels(vendors$HUB)[i]",
        "+ ",
        "  m <- m %>%",
        "+ ",
        "    addCircleMarkers(",
        "+ ",
        "      data = vendors %>% filter(HUB == hub),",
        "+ ",
        "      group = hub,",
        "+ ",
        "      radius = 5,",
        "+ ",
        "      stroke = FALSE,",
        "+ ",
        "      color = map_palette[i],",
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = colorFactor(map_palette, levels(vendors$HUB), na.color=NULL, ordered = TRUE),",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "> ",
        "",
        "> ",
        "m",
        "> ",
        "",
        "> ",
        "m <- leaflet(data = vendors) %>%",
        "+ ",
        "  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%",
        "+ ",
        "  addPolygons(",
        "+ ",
        "    data = dallas_co,",
        "+ ",
        "    fillColor = \"#333333\",",
        "+ ",
        "    fillOpacity = 0.02, weight = 2, color = \"#333333\",",
        "+ ",
        "    smoothFactor = 1,",
        "+ ",
        "    options = pathOptions(clickable = F, interactive = F)",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "for(i in seq_along(levels(vendors$HUB))) {",
        "+ ",
        "  hub <- levels(vendors$HUB)[i]",
        "+ ",
        "  m <- m %>%",
        "+ ",
        "    addCircleMarkers(",
        "+ ",
        "      data = vendors %>% filter(HUB == hub),",
        "+ ",
        "      group = hub,",
        "+ ",
        "      radius = 5,",
        "+ ",
        "      stroke = FALSE,",
        "+ ",
        "      color = map_palette[i],",
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = colorFactor(map_palette, levels(vendors$HUB), na.color=NULL, ordered = TRUE),",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "> ",
        "",
        "> ",
        "m",
        "> ",
        "",
        "> ",
        "m <- leaflet(data = vendors) %>%",
        "+ ",
        "  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%",
        "+ ",
        "  addPolygons(",
        "+ ",
        "    data = dallas_co,",
        "+ ",
        "    fillColor = \"#333333\",",
        "+ ",
        "    fillOpacity = 0.03, weight = 2, color = \"#333333\",",
        "+ ",
        "    smoothFactor = 1,",
        "+ ",
        "    options = pathOptions(clickable = F, interactive = F)",
        "+ ",
        "  )",
        "> ",
        "",
        "> ",
        "for(i in seq_along(levels(vendors$HUB))) {",
        "+ ",
        "  hub <- levels(vendors$HUB)[i]",
        "+ ",
        "  m <- m %>%",
        "+ ",
        "    addCircleMarkers(",
        "+ ",
        "      data = vendors %>% filter(HUB == hub),",
        "+ ",
        "      group = hub,",
        "+ ",
        "      radius = 5,",
        "+ ",
        "      stroke = FALSE,",
        "+ ",
        "      color = map_palette[i],",
        "+ ",
        "      fillOpacity = 0.7,",
        "+ ",
        "      clusterOptions = markerClusterOptions(",
        "+ ",
        "        maxClusterRadius = 60,",
        "+ ",
        "        disableClusteringAtZoom = 12",
        "+ ",
        "      )",
        "+ ",
        "    )",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "m <- m %>%",
        "+ ",
        "  addLegend(",
        "+ ",
        "    \"bottomright\",",
        "+ ",
        "    pal = colorFactor(map_palette, levels(vendors$HUB), na.color=NULL, ordered = TRUE),",
        "+ ",
        "    values = ~HUB,",
        "+ ",
        "    title = \"HUB Eligibility\",",
        "+ ",
        "    opacity = 0.7",
        "+ ",
        "  ) %>%",
        "+ ",
        "  addLayersControl(",
        "+ ",
        "    overlayGroups = levels(vendors$HUB),",
        "+ ",
        "    position = \"bottomleft\",",
        "+ ",
        "    options = layersControlOptions(collapsed = FALSE)",
        "+ ",
        "  ) %>%",
        "+ ",
        "  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])",
        "> ",
        "",
        "> ",
        "m",
        "> ",
        "data <- read_csv(\"data/geocoded_vendors.csv\") %>%",
        "+ ",
        "  filter(`HUB Status` == \"Yes\") %>%",
        "+ ",
        "  mutate(HUB = factor(",
        "+ ",
        "    case_when(",
        "+ ",
        "      `HUB Eligibility` == \"BL\" ~ \"Black\",",
        "+ ",
        "      `HUB Eligibility` == \"AS\" ~ \"Asian\",",
        "+ ",
        "      `HUB Eligibility` == \"HI\" ~ \"Hispanic\",",
        "+ ",
        "      `HUB Eligibility` == \"AI\" ~ \"Native American\",",
        "+ ",
        "      `HUB Eligibility` == \"WO\" ~ \"Women Owned\",",
        "+ ",
        "      `HUB Eligibility` == \"DV\" ~ \"Disabled Veteran\",",
        "+ ",
        "      TRUE ~ NA_character_",
        "+ ",
        "    ),",
        "+ ",
        "    levels = c(\"Black\", \"Asian\", \"Hispanic\", \"Native American\", \"Women Owned\", \"Disabled Veteran\")",
        "+ ",
        "  )) %>% ",
        "+ ",
        "  sf::st_as_sf(coords = c(\"long\", \"lat\")) %>%",
        "+ ",
        "  sf::st_set_crs(sf::st_crs(dallas_co)) %>%",
        "+ ",
        "  sf::st_join(dallas_co, sf::st_within) %>%",
        "+ ",
        "  filter(!is.na(GEOID))",
        "> ",
        "summary <- data %>%",
        "+ ",
        "  group_by(`Vendor ID`) %>% # Replace 'VendorID' with your unique vendor identifier column",
        "+ ",
        "  summarize(all_HUB = paste(unique(HUB), collapse = \", \")) %>%",
        "+ ",
        "  ungroup()",
        "> ",
        "View(summary)",
        "> ",
        "summary <- data %>%",
        "+ ",
        "  group_by(`Vendor ID`) %>% # Replace 'VendorID' with your unique vendor identifier column",
        "+ ",
        "  summarize(all_HUB = list(HUB)) %>%",
        "+ ",
        "  ungroup()",
        "Error in (function (..., na.last = TRUE, decreasing = FALSE, method = c(\"auto\",  : \n  unimplemented type 'list' in 'orderVector1'\n",
        "Error: VECTOR_ELT() can only be applied to a 'list', not a 'closure'\n",
        "Error in .rs.findDataFrame(\"\", \"summary\", \"09A9B56E\", \"C:/Users/taylo/Documents/GitHub/minority-businesses/.Rproj.user/5DDA3EEB/viewer-cache\") : \n  R_Reprotect: only 1 protected item, can't reprotect index -4\n",
        "Error in .rs.findDataFrame(\"\", \"summary\", \"09A9B56E\", \"C:/Users/taylo/Documents/GitHub/minority-businesses/.Rproj.user/5DDA3EEB/viewer-cache\") : \n  R_Reprotect: only 1 protected item, can't reprotect index -4\n",
        "Error in if (totalCols == 0) return(NULL) : argument is of length zero\n",
        "> ",
        "View(summary)",
        "Error in (function (..., na.last = TRUE, decreasing = FALSE, method = c(\"auto\",  : \n  unimplemented type 'list' in 'orderVector1'\n",
        "Error: VECTOR_ELT() can only be applied to a 'list', not a 'closure'\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in xfun::split_lines(x) : \n  R_Reprotect: only 4 protected items, can't reprotect index -1\n",
        "Error in regmatches(line, regexec(.rs.reYamlOptChunkBegin(), line)) : \n  R_Reprotect: only 4 protected items, can't reprotect index -1\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in xfun::split_lines(x) : \n  R_Reprotect: only 4 protected items, can't reprotect index -1\n",
        "Error in regmatches(line, regexec(.rs.reYamlOptChunkBegin(), line)) : \n  R_Reprotect: only 4 protected items, can't reprotect index -1\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "\nRestarting R session...\n\n"
    ]
}