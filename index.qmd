---
pagetitle: "Minority Businesses Map"
format: html
---

```{r setup, output = F, echo = F}

library(tidycensus)
library(sf)
require(tidyverse)
library(leaflet)

# vendors <- readxl::read_excel(
#   "C:/Users/taylo/CPAL Dropbox/Analytics/Projects + Requests/External Requests/Impact Ventures/Business by Race/Comptroller State Approved Vendors.xlsx",
#   sheet = "DallasCountyVendors")
# 
# vendorsGC <- vendors %>%
#   mutate(`Mailing Address` = if_else(str_detect(`Mailing Address`, ",$"), 
#                                    `Mailing Address`, 
#                                    str_c(`Mailing Address`, ",")),
#          address = paste0(`Mailing Address`, " ", `City`, ", ", `State`, " ", `ZIP5`, ", ", `Country`)) %>%
#   tidygeocoder::geocode(address, method = "arcgis")
# 
# write_csv(vendorsGC, "data/geocoded_vendors.csv")

dallas_co <- tigris::counties(state = "TX") %>%
  filter(NAME == "Dallas")

vendors <- read_csv("data/geocoded_vendors.csv") %>%
  filter(`HUB Status` == "Yes") %>%
  mutate(
    jitter_cond = duplicated(lat) | duplicated(lat, fromLast = TRUE) | 
                  duplicated(long) | duplicated(long, fromLast = TRUE),
    long = ifelse(jitter_cond, jitter(long, amount = 0.0001), long),
    lat = ifelse(jitter_cond, jitter(lat, amount = 0.0001), lat),
    HUB = factor(
      case_when(
        `HUB Eligibility` == "BL" ~ "Black",
        `HUB Eligibility` == "AS" ~ "Asian",
        `HUB Eligibility` == "HI" ~ "Hispanic",
        `HUB Eligibility` == "AI" ~ "Native American",
        `HUB Eligibility` == "WO" ~ "Women Owned",
        `HUB Eligibility` == "DV" ~ "Disabled Veteran",
        TRUE ~ NA_character_
      ),
      levels = c("Black", "Asian", "Hispanic", "Native American", "Women Owned", "Disabled Veteran")),
    address = str_replace(address, ", USA$", ""),
    Phone = ifelse(is.na(Phone), 
                   "No phone number listed",
                   str_replace(Phone, 
                               pattern = "^(\\d{3})-(\\d{3})-(\\d{4})$", 
                               replacement = "(\\1) \\2-\\3")),
    HUB_desc = case_when(
      `HUB Eligibility` == "BL" ~ "Listed as Black-Owned",
      `HUB Eligibility` == "AS" ~ "Listed as Asian-Owned",
      `HUB Eligibility` == "HI" ~ "Listed as Hispanic-Owned",
      `HUB Eligibility` == "AI" ~ "Listed as Native American-Owned",
      `HUB Eligibility` == "WO" ~ "Listed as Women-Owned",
      `HUB Eligibility` == "DV" ~ "Listed as Owned by Service Disabled Veteran of 20% or More",
      TRUE ~ NA_character_)
    ) %>% 
  sf::st_as_sf(coords = c("long", "lat")) %>%
  sf::st_set_crs(sf::st_crs(dallas_co)) %>%
  sf::st_join(dallas_co, sf::st_within) %>%
  filter(!is.na(GEOID))

bounds <- sf::st_bbox(dallas_co)

expanded_bounds <- as.vector(c(
  xmin = bounds["xmin"] - 0.25, 
  ymin = bounds["ymin"] - 0.25, 
  xmax = bounds["xmax"] + 0.25, 
  ymax = bounds["ymax"] + 0.25
))

count_vendor <- scales::comma(length(unique(vendors$`Vendor ID`)))

count_black <- scales::comma(nrow(vendors %>% filter(HUB == "Black")))
count_asian <- scales::comma(nrow(vendors %>% filter(HUB == "Asian")))
count_hispanic <- scales::comma(nrow(vendors %>% filter(HUB == "Hispanic")))
count_native <- scales::comma(nrow(vendors %>% filter(HUB == "Native American")))
count_women <- scales::comma(nrow(vendors %>% filter(HUB == "Women Owned")))
count_veteran <- scales::comma(nrow(vendors %>% filter(HUB == "Disabled Veteran")))


map_palette <- c("#008097", "#ED683F", "#EACA2D", "#5C2B1C", "#ED018C", "#185411")

```

::: column-screen-inset

```{=html}
<div class="mainboxbox">
<div class="mainbox">
```

:::: {.card}

```{=html}
<div class="cardbox">

<div class="left-card-col dark-col">
```

```{=html}
  <div class="card-side" style="width: 94%;">
```

# There are `r count_vendor` unique minority-owned vendors in Dallas County

```{=html}
    <div class="subtext">
      &#8212; Texas Comptroller (2023)
    </div>
  </div>
</div>
```

```{=html}
<div class="right-card-col">

  <div style="width: 3%">
  </div>

  <div class="card-side">
    
    <h4>
      <div class="rounded-outline"><b>`r count_black`</b></div> listed as <span style="color: #008097;">Black-owned</span>
    </h4>
    <h4>
      <div class="rounded-outline"><b>`r count_asian`</b></div> listed as <span style="color: #ED683F;">Asian-owned</span>
    </h4>
    <h4>
      <div class="rounded-outline"><b>`r count_hispanic`</b></div> listed as <span style="color: #bd9e0b;">Hispanic-owned</span>
    </h4>
    <h4>
      <div class="rounded-outline"><b>`r count_native`</b></div> listed as <span style="color: #5C2B1C;">Native American-owned</span>
    </h4>
    <h4>
      <div class="rounded-outline"><b>`r count_women`</b></div> listed as <span style="color: #ED018C;">Women-owned</span>
    </h4>
    <h4>
      <div class="rounded-outline"><b>`r count_veteran`</b></div> listed as owned by a <span style="color: #185411;">Service Disabled Veteran of 20% or more</span>
    </h4>

  </div>
</div>

</div>

```

::::

```{=html}

<div class="mapscroll-container">
  <a href="javascript:void(0);" class="scroll-link" onclick="scrollToMap()">
      Click for map <i class="bi bi-chevron-down"></i>
  </a>
</div>

```

```{r map}

m <- leaflet(data = vendors, 
             height = "90vh", 
             width = "100%", 
             elementId = "vendor-map",
             options = leafletOptions(
               zoomSnap = 0.5,
               zoomDelta = 0.5,
               minZoom = 9.5,
               wheelPxPerZoomLevel = 90
               )
             ) %>%
  addTiles(urlTemplate = cpaltemplates::cpal_mapbox, attribution = cpaltemplates::cpal_leaflet) %>%
  addPolygons(
    data = dallas_co,
    fillColor = "#333333",
    fillOpacity = 0.03, weight = 2, color = "#333333",
    smoothFactor = 1,
    options = pathOptions(clickable = F, interactive = F)
  )

for(i in seq_along(levels(vendors$HUB))) {
  hub <- levels(vendors$HUB)[i]
  m <- m %>%
    addCircleMarkers(
      data = vendors %>% filter(HUB == hub),
      group = hub,
      radius = 5,
      stroke = FALSE,
      color = map_palette[i],
      fillOpacity = 0.7,
      clusterOptions = markerClusterOptions(
        maxClusterRadius = 60,
        disableClusteringAtZoom = 12
      ),
      label = ~`Company Name`,
      popup = ~paste0(
        "<b>", `Company Name`, "</b><br/>",
        "<i>", HUB_desc, "</i><br/>",
        address, "<br/>",
        Phone, "<br/>",
        Email
      )
    )
}

m <- m %>%
  addLegend(
    "topright",
    pal = colorFactor(map_palette, levels(vendors$HUB), na.color=NULL, ordered = TRUE),
    values = ~HUB,
    title = "HUB Eligibility",
    opacity = 0.7
  ) %>%
  addLayersControl(
    overlayGroups = levels(vendors$HUB),
    position = "topleft",
    options = layersControlOptions(collapsed = FALSE)
  ) %>%
  setMaxBounds(expanded_bounds[1], expanded_bounds[2], expanded_bounds[3], expanded_bounds[4])

m
```

```{=html}

<script>
function scrollToMap() {
    const element = document.getElementById('vendor-map');
    const headerOffset = 70; // height of your fixed header
    const elementPosition = element.getBoundingClientRect().top;
    const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

    window.scrollTo({
        top: offsetPosition,
        behavior: 'smooth'
    });
}
</script>

```


```{=html}
</div>
</div>

```

:::